name: Upload vs-mlrt-cuda dependencies

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'which tag to upload to'
        required: true
        default: 'v100'
  workflow_call:
    inputs:
      tag:
        description: 'which tag to upload to'
        required: true
        type: string
    secrets:
      REPO_TOKEN:
        required: true

jobs:
  build-windows:
    runs-on: windows-2022
    outputs:
      runID: ${{ steps.output.outputs.runID }}

    defaults:
      run:
        shell: bash

    steps:
    # Note: unfortunately, cuDNN download requires registration and according to its license
    # agreements, we can only redistribute it along with an application that uses it, so we
    # have to use a private repository to hold a copy of the library.
    - name: Download cuDNN inference library
      run: |
        # https://stackoverflow.com/questions/20396329/how-to-download-github-release-from-private-repo-using-command-line/35688093#35688093

        tag=cudnn-8.9.0-bin
        name=cudnn.7z

        AUTH="Authorization: token ${{ secrets.REPO_TOKEN }}"
        response=$(curl -sH "$AUTH" https://api.github.com/repos/AmusementClub/cuda/releases/tags/$tag)
        eval $(echo "$response" | grep -C3 "name.:.\+$NAME" | grep -w id | tr : = | tr -cd '[[:alnum:]]=')
        [ "$id" ] || { echo "Error: Failed to get asset id, response: $response" | awk 'length($0)<100' >&2; exit 1; }
        ASSET="https://api.github.com/repos/AmusementClub/cuda/releases/assets/$id"
        curl -LJO -H "$AUTH" -H 'Accept: application/octet-stream' "$ASSET"

    - name: Extract cuDNN library
      run: 7z x cudnn.7z

    - name: Move cuDNN library
      run: mv cudnn/bin vsmlrt-cuda -v

    # Same licensing issue with the tensorrt libraries.
    - name: Download TensorRT library
      run: |
        # https://stackoverflow.com/questions/20396329/how-to-download-github-release-from-private-repo-using-command-line/35688093#35688093

        tag=tensorrt-8.6.1-bin
        name=TensorRT.7z

        AUTH="Authorization: token ${{ secrets.REPO_TOKEN }}"
        response=$(curl -sH "$AUTH" https://api.github.com/repos/AmusementClub/cuda/releases/tags/$tag)
        eval $(echo "$response" | grep -C3 "name.:.\+$NAME" | grep -w id | tr : = | tr -cd '[[:alnum:]]=')
        [ "$id" ] || { echo "Error: Failed to get asset id, response: $response" | awk 'length($0)<100' >&2; exit 1; }
        ASSET="https://api.github.com/repos/AmusementClub/cuda/releases/assets/$id"
        curl -LJO -H "$AUTH" -H 'Accept: application/octet-stream' "$ASSET"

        mv "$name" trt.7z

    - name: Extract TensorRT library
      run: 7z x trt.7z

    - name: Move TensorRT library
      run: mv TensorRT/*.dll vsmlrt-cuda -v

    - name: Download CUDA Libraries
      shell: cmd
      run: |
        curl -s -o cuda_installer.exe -L https://developer.download.nvidia.com/compute/cuda/12.1.1/network_installers/cuda_12.1.1_windows_network.exe
        cuda_installer.exe -s cudart_12.1 cublas_12.1 cufft_12.1 cupti_12.1 nvrtc_12.1

    - name: Move CUDA Libraries
      shell: cmd
      run: |
        move "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1\extras\CUPTI\lib64\cupti*.dll" vsmlrt-cuda
        move "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1\bin\*.dll" vsmlrt-cuda
        del vsmlrt-cuda\cudart32*.dll

    - name: Setup VC commands
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    - name: Copy VC Runtime Libraries
      shell: bash
      run: |
        cd vsmlrt-cuda
        while true; do
          changed=false
          for dll in *.[dD][lL][lL]; do
             for dep in $(dumpbin -dependents "$dll" | grep -o -i '\<\(vc\|msvc\)[a-z0-9_-]*\.dll'); do
                echo "finding $dep for $dll"
                if ! test -f ./"$dep"; then
                  changed=true
                  src="$(where "$dep" | grep -i 'MSVC' | head -1)"
                  echo "copying $src for $dep"
                  test -f "$src" || exit 1
                  cp -f "$src" .
                fi
             done
          done
          $changed || break
        done

    - name: Cache zlib
      id: cache-zlib
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}/zlib-release
        key: ${{ runner.os }}-zlib-1.2.12

    - name: Setup msbuild
      if: steps.cache-zlib.outputs.cache-hit != 'true'
      uses: microsoft/setup-msbuild@v1

    - name: Compile zlib
      if: steps.cache-zlib.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        curl -s -o zlib.tar.gz -LJO https://github.com/madler/zlib/archive/refs/tags/v1.2.12.tar.gz
        tar -xf zlib.tar.gz
        cd zlib-1.2.12\contrib\vstudio\vc14
        python -c "f=open('zlibvc.vcxproj','r+b');s=f.read();s=s.replace(b'MultiThreadedDLL',b'MultiThreaded');start=s.index(b'<ClCompile Include=\"..\\..\\masmx64\\inffas8664.c\">');end_str=b'</ClCompile>\n';end=s.index(end_str,start);s=s[:start]+s[end+len(end_str):];f.seek(0);f.write(s);f.truncate();f.close()"
        msbuild zlibvc.sln -target:zlibvc /p:Configuration=ReleaseWithoutAsm /p:Platform=x64 /p:PlatformToolset=v143 -maxCpuCount
        mkdir %GITHUB_WORKSPACE%\zlib-release
        move x64\ZlibDllReleaseWithoutAsm\zlibwapi.dll %GITHUB_WORKSPACE%\zlib-release

    - name: Copy zlib
      run: cp -v zlib-release/zlibwapi.dll vsmlrt-cuda

    - name: Compress
      run: |
        7z a -t7z -mx=3 vsmlrt-cuda.7z vsmlrt-cuda

    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        name: vsmlrt-cuda
        path: vsmlrt-cuda.7z
        retention-days: 1

    - name: Rename release asset
      run: |
        mv vsmlrt-cuda.7z vsmlrt-cuda.${{ github.event.inputs.tag}}.7z

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.tag }}
        files: vsmlrt-cuda.${{ github.event.inputs.tag }}.7z
        fail_on_unmatched_files: true
        generate_release_notes: false
        prerelease: true
